import pandas as pd
import numpy as np
import math, random
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import Dense
import tensorflow as tf
import random

# Server code to read data from Client C program
import socket
import struct

#HOST = '131.227.60.141'  # localhost
HOST = '127.0.0.1'  # localhost
PORT = 65431        # Port to listen on

# Create a socket object
with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
    s.bind((HOST, PORT))
    s.listen()

    print(f"Server listening on {HOST}:{PORT}")
    while True:
        conn, addr = s.accept()
        print('Connected by', addr)

        with conn:
            while True:
                data = conn.recv(1024).decode()  # Receive data from the C program, Assuming an integer is 4 bytes (32 bits)
                if not data:
                    break
                received_values_26 = list(map(float, data.split()))
            # received_int = struct.unpack('!i', data)[0]  # Convert bytes to integer
                print("Received CSI values from ORAN:", received_values_26) 
# Load your dataset 'sample_data.csv'
                df = pd.read_csv("28_MCS_UE2.csv")
                df = df.dropna()          #removes any rows containing missing values
                X = df.drop('y', axis=1)  # We have 80 input columns, considering all except y column
                y = df['y']  # Here "y" is target variable

                print("Shape of X:", X.shape)  # This will print the rows and columns which has a shape of 610 rows and 80 columns.
                print("Shape of y:", y.shape)  # This will print the columns variable (target variable) which has a shape of 29 rows and 1 column

            # Split the dataset into training and testing sets
                X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

                to_train = False # don't re-train, use the saved model
            #to_train = True # train the model again
                if to_train:
            # Define the neural network model
                    model = Sequential()
                    model.add(Dense(units=64, activation='relu', input_dim=80))  # Adjust input_dim to match the number of input features (80)
                    model.add(Dense(units=128, activation='tanh'))
                    model.add(Dense(units=256, activation='tanh'))
                    model.add(Dense(units=512, activation='relu'))
                    model.add(Dense(units=256, activation='relu'))
                    model.add(Dense(units=64, activation='relu'))
                    model.add(Dense(units=8, activation='relu'))
                    model.add(Dense(units=1)) # Output layer for regression
                    model.compile(loss='mean_squared_error', optimizer='adam')           

            # Train the model (you can adjust batch size and epochs as needed)
                    model.fit(X_train, y_train, batch_size=2, epochs=100, verbose=1, validation_data=(X_test, y_test), shuffle=True)
                    model.save('28_model_UE2')
                else:
                    model = load_model('28_model_UE2') # load the model from the given folder
                
            # Function to predict 'y' based on input 'x' using the trained model
                def function_to_predict(x):
                # Reshape 'x' to match the input shape of the model (80 input features)
                    x = np.array(x).reshape(1, -1)
                    print(x)
                # Predict 'y' using the model

                    y_pred = model.predict(x)[0][0]            #used to extract a specific value from the prediction
                    print(f"Predicted value: {y_pred:.2f}")
                    return y_pred   

            # Generate random input data and make predictions 
                x_hat = []
                y_true = []

                for _ in range(1):
                    x = [random.uniform(-10.0, 700.0) for _ in range(80)]  # Generate random input within the specified range
                    x_hat.append(x)
                    y_true.append(function_to_predict(x))

            # Predict 'y' using the model
                y_hat = [function_to_predict(x) for x in x_hat]

            # Print the results in
                for i in range(len(y_true)):
                    print(f"Predicted value  UE2 28 = {y_hat[i]:.2f}; Actual value UE2 26 = {y_true[i]:.2f}; Diff. UE2 28 = {y_true[i] - y_hat[i]:.2f}")

# Test unkown input data for each MCS. 
#test_data_28 = [333.798, -7.281, 279.751, -5.922, 279.009, -5.319, 279.69, -5.696, 279.258, -6.116, 280.906, -7.358, 280.341, -6.111, 280.305, -5.928, 79.464, -6.726, 279.979, -6.333, 385.5, -6.423, 355.485, -5.973, 355.015, -5.552, 354.803, -5.946, 354.738, -5.976, 356.267, -6.862, 355.795, -6.133, 355.163, -5.796, 354.375, -6.126, 355.238, -6.237, 659.789, -5.863, 635.389, -5.65, 633.901, -6.799, 635.842, -6.486, 634.532, -6.513, 635.363, -5.927, 635.397, -5.96, 636.174, -6.188, 632.945, -6.146, 634.674, -7.237, 385.206, -5.551, 355.338, -6.073, 354.633, -6.597, 355.079, -6.623, 354.639, -6.282, 355.532, -6.17, 355.196, -6.221, 354.936, -5.992, 353.071, -5.263, 354.971, -6.351] 
#test_data_26 = [333.596, -7.257, 279.702, -6.377, 278.968, -5.189, 279.582, -5.642, 279.211, -6.124, 281.156, -7.328, 280.606, -6.25, 280.153, -6.307, 279.453, -6.524, 280.065, -6.028, 385.658, -6.392, 355.42, -6.012, 355.091, -5.691, 354.812, -5.887, 354.321, -5.91, 356.312, -6.742, 355.555, -6.211, 355.204, -5.831, 354.483, -6.047, 355.322, -6.075, 659.899, -5.835, 635.625, -5.835, 634.23, -6.464, 635.519, -6.38, 634.624, -6.647, 635.088, -5.815, 635.322, -5.96, 636.047, -6.402, 633.012, -6.311, 634.498, -7.085, 385.559, -5.34, 355.554, -5.631, 354.288, -6.686, 355.527, -6.682, 354.592, -6.351, 355.582, -5.968, 355.032, -5.92, 354.904, -5.58, 353.4, -5.19, 354.649, -6.31, 6512.64]
#test_data_27 = [333.804, -6.844, 279.694, -5.928, 278.983, -5.378, 279.736, -5.775, 279.396, -5.938, 281.006, -7.159, 280.36, -6.508, 280.37, -6.1, 279.431, -6.948, 279.886, -6.126, 385.678, -6.494, 355.335, -6.159, 355.107, -5.67, 354.769, -6.049, 354.718, -6.05, 356.267, -6.83, 355.849, -6.267, 354.985, -5.656, 354.566, -6.131, 355.128, -5.95, 659.8, -5.62, 635.616, -5.623, 633.958, -6.875, 635.382, -6.263, 634.566, -6.571, 635.057, -5.867, 635.147, -5.866, 635.68, -6.201, 633.101, -5.99, 634.328, -7.234, 385.21, -5.519, 355.791, -5.847, 354.511, -6.245, 355.218, -6.635, 354.606, -6.485, 355.416, -6.049, 355.296, -6.188, 355.276, -5.946, 353.031, -5.335, 354.573, -6.523] 
#test_data_25 = [333.684, -6.847, 279.615, -6.261, 278.938, -5.382, 279.921, -5.756, 279.488, -5.817, 281.03, -7.191, 280.421, -6.014, 280.137, -6.054, 279.601, -6.777, 279.742, -6.158, 385.495, -6.604, 355.37, -5.948, 355.126, -5.489, 354.96, -6.122, 354.585, -5.828, 356.443, -6.941, 355.628, -6.294, 354.914, -5.782, 354.33, -6.15, 355.266, -5.852, 659.741, -5.758, 635.749, -5.854, 634.221, -6.737, 635.407, -6.573, 634.359, -6.76, 634.907, -5.884, 635.579, -6.059, 636.068, -6.161, 632.978, -6.159, 634.543, -7.021, 385.331, -5.696, 355.458, -5.84, 354.465, -6.424, 355.419, -6.582, 354.624, -6.286, 355.354, -5.898, 354.895, -6.113, 354.911, -5.732, 353.111, -5.31, 354.55, -6.315]
#test_data_24 = [333.982, -7.024, 279.417, -6.076, 278.968, -5.197, 280.102, -5.857, 279.392, -6.344, 280.768, -7.337, 280.268, -6.433, 280.254, -6.294, 279.315, -6.946, 279.904, -6.366, 385.695, -6.245, 355.391, -6.194, 355.131, -5.654, 355.136, -6.199, 354.438, -5.856, 356.247, -6.887, 355.632, -6.151, 355.016, -5.88, 354.367, -6.276, 355.244, -6.003, 659.782, -5.902, 635.769, -5.634, 633.881, -6.656, 635.576, -6.54, 634.607, -6.536, 635.189, -5.847, 635.509, -6.032, 635.85, -5.955, 633.075, -6.137, 634.529, -7.033, 385.446, -5.514, 355.502, -6.006, 354.398, -6.587, 355.336, -6.5, 354.399, -6.468, 355.461, -6.085, 355.102, -6.257, 355.223, -5.733, 353.27, -5.473, 354.818, -6.312] 
#test_data_23 = [333.696, -6.764, 279.766, -6.086, 278.952, -5.388, 279.884, -5.515, 279.318, -6.202, 280.749, -7.206, 280.435, -6.45, 280.26, -5.919, 279.441, -6.704, 279.961, -6.286, 385.545, -6.338, 355.445, -6.162, 354.831, -5.384, 354.919, -5.948, 354.474, -5.774, 356.34, -6.947, 355.701, -6.118, 354.916, -5.811, 354.506, -6.127, 355.036, -5.743, 659.808, -5.785, 635.91, -5.368, 634.042, -6.94, 635.48, -6.609, 634.7, -6.789, 635.229, -5.949, 635.413, -6.066, 635.924, -5.927, 633.015, -6.191, 634.379, -7.09, 385.463, -5.436, 355.645, -6.155, 354.51, -6.656, 355.031, -6.379, 354.68, -6.409, 355.729, -6.098, 355.276, -6.296, 355.069, -6.087, 353.287, -5.323, 354.62, -6.434] 
#test_data_22 = [333.894, -7.058, 279.703, -6.254, 278.734, -4.796, 279.795, -5.741, 279.38, -5.912, 280.575, -7.151, 280.175, -6.252, 280.22, -6.021, 279.591, -6.719, 279.743, -6.166, 385.405, -6.253, 355.491, -5.823, 355.105, -5.551, 355.283, -6.205, 354.447, -5.798, 356.306, -6.942, 355.563, -6.186, 354.898, -5.811, 354.528, -6.058, 355.3, -6.318, 660.007, -5.888, 635.632, -5.756, 634.131, -6.727, 635.283, -6.388, 634.612, -6.678, 635.206, -5.853, 635.446, -5.739, 635.767, -5.907, 633.196, -6.151, 634.436, -7.264, 385.643, -5.418, 355.549, -5.871, 354.043, -6.497, 355.061, -6.632, 354.531, -6.406, 355.407, -6.013, 355.437, -5.987, 355.125, -6.035, 353.168, -5.198, 354.762, -6.253] 
                    test_data_28 = received_values_26
            #test_data_21 = [333.925, -6.893, 279.619, -5.863, 278.669, -5.332, 279.811, -5.84, 279.23, -6.062, 280.735, -7.162, 280.438, -6.456, 280.064, -5.945, 279.328, -6.607, 279.919, -6.281, 385.671, -6.396, 355.486, -5.926, 355.186, -5.478, 354.899, -6.249, 354.518, -5.91, 356.286, -7.04, 355.721, -6.073, 354.617, -5.798, 354.404, -6.047, 355.174, -6.184, 659.871, -6.058, 635.903, -5.724, 633.998, -6.74, 635.637, -6.593, 634.692, -6.689, 635.102, -5.885, 635.566, -5.951, 635.734, -6.336, 632.967, -6.239, 634.403, -7.117, 385.616, -5.414, 355.638, -6.003, 354.274, -6.584, 355.257, -6.594, 354.696, -6.263, 355.64, -5.758, 355.206, -6.103, 354.966, -5.681, 353.212, -5.363, 354.616, -6.108] 
#test_data_20 = [334.195, -6.896, 279.728, -6.116, 278.953, -5.053, 280.02, -5.804, 279.279, -6.201, 280.974, -7.219, 280.339, -6.417, 280.153, -6.025, 279.536, -6.794, 279.802, -6.178, 385.72, -6.27, 355.35, -6.155, 354.736, -5.532, 354.901, -6.236, 354.758, -5.93, 356.371, -6.934, 355.709, -6.078, 354.926, -5.758, 354.668, -6.41, 355.245, -6.325, 660.006, -5.981, 635.747, -5.863, 633.941, -6.654, 635.755, -6.56, 634.585, -6.376, 635.11, -6.049, 635.331, -6.197, 635.87, -6.262, 632.989, -6.343, 634.485, -7.09, 385.608, -5.393, 355.569, -5.971, 354.506, -6.735, 355.284, -6.471, 354.473, -6.34, 355.482, -5.843, 355.24, -6.003, 355.08, -5.901, 353.256, -5.503, 354.601, -6.313] 
#test_data_19 = [334.201, -7.029, 279.513, -6.138, 278.916, -5.065, 279.989, -5.741, 279.31, -6.281, 280.845, -7.532, 280.363, -6.229, 279.974, -5.984, 279.141, -6.44, 279.798, -6.259, 385.783, -6.343, 355.631, -5.759, 355.079, -5.517, 355.031, -6.088, 354.715, -5.78, 356.247, -6.895, 355.562, -5.901, 354.893, -5.59, 354.285, -6.155, 355.225, -6.077, 659.73, -5.641, 635.639, -5.732, 633.94, -6.758, 635.611, -6.565, 634.59, -6.516, 635.223, -5.893, 635.059, -6.099, 635.934, -6.222, 633.08, -6.284, 634.302, -7.149, 385.383, -5.797, 355.453, -6.092, 354.371, -6.449, 355.286, -6.264, 354.608, -6.388, 355.457, -5.927, 355.251, -5.982, 354.879, -5.616, 353.299, -5.25, 354.42, -6.19] 
#test_data_18 = [333.996, -6.945, 279.69, -6.006, 279.114, -5.038, 279.699, -5.961, 279.157, -5.947, 280.76, -7.413, 280.342, -6.547, 279.907, -6.22, 279.416, -6.84, 279.732, -6.098, 385.603, -6.551, 355.578, -5.869, 355.113, -5.651, 355.187, -5.925, 354.557, -6.043, 356.154, -6.896, 355.574, -6.263, 354.964, -5.884, 354.178, -6.128, 355.106, -6.067, 659.854, -5.912, 635.835, -5.738, 634.022, -6.678, 635.456, -6.47, 634.795, -6.691, 635.286, -5.989, 635.498, -6.21, 635.604, -6.452, 633.26, -6.171, 634.336, -7.126, 385.352, -5.483, 355.675, -6.012, 354.477, -6.572, 355.216, -6.639, 354.385, -6.434, 355.177, -6.001, 355.266, -5.939, 355.054, -5.849, 353.063, -5.441, 354.711, -6.212] 
#test_data_17 = [333.808, -7.01, 279.508, -6.273, 279.243, -5.099, 279.817, -5.618, 279.543, -6.091, 280.792, -7.171, 280.775, -6.362, 280.217, -5.751, 279.515, -6.502, 279.548, -6.541, 385.597, -6.558, 355.364, -6.074, 355.193, -5.471, 354.949, -5.976, 354.713, -5.75, 356.102, -6.71, 355.574, -5.927, 354.827, -5.772, 354.586, -6.341, 354.984, -5.859, 659.695, -5.76, 635.746, -5.915, 633.923, -6.751, 635.44, -6.369, 634.471, -6.566, 634.993, -5.958, 635.31, -6.184, 635.862, -6.315, 632.99, -6.152, 634.413, -7.293, 385.355, -5.37, 355.736, -5.988, 354.302, -6.368, 355.427, -6.749, 354.56, -6.55, 355.483, -5.945, 355.367, -5.968, 355.06, -5.823, 352.895, -5.279, 354.91, -6.514] 
#test_data_16 = [334.029, -6.724, 279.716, -6.125, 279.063, -5.167, 279.899, -5.683, 279.546, -5.882, 280.957, -7.423, 280.903, -6.514, 280.275, -6.061, 279.499, -6.55, 279.63, -6.217, 385.45, -6.167, 355.632, -5.93, 355.038, -5.688, 354.924, -6.224, 354.52, -5.907, 356.087, -6.859, 355.923, -6.112, 354.855, -5.7, 354.325, -6.192, 355.006, -6.074, 659.872, -5.853, 635.937, -5.68, 633.935, -6.645, 635.645, -6.476, 634.482, -6.867, 635.136, -5.915, 635.571, -6.02, 635.934, -6.111, 632.82, -6.261, 634.296, -7.11, 385.385, -5.463, 355.746, -5.992, 354.369, -6.416, 355.289, -6.668, 354.687, -6.482, 355.235, -5.936, 355.378, -6.293, 355.099, -6.227, 353.108, -5.184, 354.575, -6.532]
#test_data_15 = [333.7, -6.872, 279.33, -6.1, 278.922, -5.334, 280.138, -5.805, 279.092, -6.214, 280.795, -7.421, 280.679, -6.265, 280.257, -5.879, 279.404, -6.7, 279.661, -6.149, 385.329, -6.346, 355.438, -5.986, 355.121, -5.212, 354.937, -6.314, 354.538, -5.969, 356.128, -6.753, 355.683, -6.043, 355.026, -5.997, 354.547, -6.276, 355.109, -5.916, 659.584, -6.084, 635.791, -5.975, 633.78, -6.758, 635.42, -6.426, 634.49, -6.797, 635.22, -6.226, 635.315, -6.258, 635.795, -6.071, 633.058, -6.182, 634.466, -7.157, 385.506, -5.584, 355.524, -6.119, 354.162, -6.602, 354.958, -6.477, 354.561, -6.53, 355.451, -5.889, 355.19, -6.201, 355.22, -5.988, 353.141, -5.48, 354.622, -6.329]
#test_data_14 = [333.666, -6.812, 279.688, -5.975, 278.755, -5.378, 279.995, -5.464, 279.359, -5.935, 280.824, -7.318, 280.566, -6.378, 280.353, -6, 279.63, -6.867, 279.765, -6.071, 385.666, -6.433, 355.435, -5.926, 355.148, -5.612, 354.874, -5.915, 354.421, -5.997, 356.292, -6.864, 355.613, -6.493, 355.145, -5.782, 354.328, -6.199, 355.121, -5.912, 659.97, -5.777, 635.861, -5.7, 633.993, -6.574, 635.487, -6.596, 634.585, -6.767, 635.209, -6.047, 635.524, -6.003, 635.883, -6.268, 632.803, -6.019, 634.284, -7.078, 385.001, -5.495, 355.391, -5.847, 354.332, -6.533, 355.368, -6.698, 354.805, -6.317, 355.61, -5.972, 355.339, -6.177, 355.138, -5.817, 352.785, -5.485, 354.643, -6.279]
#test_data_13 = [333.682, -6.777, 279.442, -6.097, 279.03, -5.204, 279.735, -5.857, 279.497, -6.008, 281, -7.255, 280.615, -6.226, 280.048, -6.014, 279.649, -6.572, 279.648, -5.996, 385.747, -6.156, 355.214, -5.685, 355.01, -5.827, 354.991, -5.918, 354.656, -5.818, 356.399, -6.849, 355.802, -6.011, 355.016, -5.841, 354.605, -6.226, 355.05, -6.035, 659.821, -5.937, 635.907, -5.49, 634.109, -6.478, 635.661, -6.537, 634.557, -6.72, 635.096, -6.321, 635.274, -6.103, 635.796, -6.115, 632.927, -6.287, 634.671, -7.452, 385.589, -5.555, 355.768, -6.083, 353.962, -6.458, 355.196, -6.557, 354.83, -6.608, 355.707, -5.981, 355.158, -6.122, 355.09, -5.845, 353.274, -5.198, 354.954, -6.259] 
#test_data_12 = [334.13, -7.151, 279.618, -6.139, 279.182, -5.268, 279.761, -5.667, 279.193, -5.979, 280.708, -7.309, 280.48, -6.456, 279.991, -6.078, 279.737, -6.658, 279.673, -6.064, 385.668, -6.37, 355.266, -5.928, 354.825, -5.517, 355.092, -6.193, 354.503, -5.685, 356.212, -6.749, 355.556, -6.079, 355.35, -5.9, 354.393, -6.19, 355.297, -6.033, 659.786, -5.827, 635.96, -5.941, 634.147, -6.894, 635.825, -6.159, 634.943, -6.488, 635.384, -5.931, 635.328, -5.993, 635.708, -6.451, 633.179, -6.134, 634.51, -7.104, 385.568, -5.687, 355.763, -5.843, 354.56, -6.542, 355.212, -6.725, 354.596, -6.374, 355.507, -6.185, 355.247, -6.041, 354.959, -5.697, 353.065, -5.229, 354.793, -6.135] 
#test_data_11 = [334.029, -6.987, 279.582, -5.899, 278.891, -4.948, 279.866, -5.6, 279.362, -5.947, 281.048, -7.282, 280.641, -6.295, 280.095, -6.086, 279.386, -6.749, 279.885, -6.291, 385.731, -6.366, 355.494, -5.937, 355.063, -5.784, 355.164, -6.337, 354.313, -6.087, 356.329, -7.004, 355.896, -6.377, 354.735, -6.024, 354.424, -6.192, 354.978, -5.915, 659.771, -5.898, 635.592, -5.626, 634.042, -6.505, 635.433, -6.611, 634.345, -6.967, 635.338, -6.106, 635.491, -6.022, 635.92, -6.303, 632.984, -6.426, 634.572, -7.228, 385.494, -5.497, 355.768, -5.922, 354.574, -6.572, 355.196, -6.503, 354.35, -6.353, 355.472, -5.924, 355.181, -6.03, 355.025, -5.735, 353.046, -5.354, 354.685, -6.499]  
#test_data_10 = [333.818, -6.937, 279.651, -6.099, 278.992, -5.067, 279.844, -5.905, 279.568, -6.132, 280.884, -7.45, 280.469, -6.233, 280.113, -5.961, 279.593, -6.832, 279.86, -6.242, 385.587, -6.483, 355.603, -6.151, 355.069, -5.471, 355.251, -5.912, 354.668, -5.733, 356.179, -6.893, 355.944, -6.19, 355.223, -5.88, 354.543, -5.861, 355.169, -6.296, 659.293, -5.727, 635.628, -5.656, 634.109, -6.884, 635.408, -6.772, 634.882, -6.518, 635.031, -5.747, 635.712, -5.908, 635.834, -6.262, 633.103, -6.404, 634.503, -6.994, 385.534, -5.524, 355.623, -6.005, 354.395, -6.491, 355.091, -6.803, 354.51, -6.52, 355.486, -6.243, 355.033, -5.93, 355.159, -5.861, 353.331, -5.201, 354.711, -6.119]
#test_data_9 = [333.802, -6.987, 279.481, -5.818, 279.17, -5.288, 279.986, -5.799, 279.308, -6.165, 280.734, -7.38, 280.501, -6.342, 280.177, -6.143, 279.471, -6.761, 279.939, -6.117, 385.596, -6.38, 355.463, -5.878, 354.96, -5.315, 354.717, -6.089, 354.436, -5.839, 356.37, -6.672, 355.675, -6.313, 354.968, -5.509, 354.378, -6.179, 355.297, -6.118, 660.044, -6.002, 635.869, -5.857, 634.144, -6.673, 635.371, -6.467, 634.285, -6.532, 634.994, -5.989, 635.317, -6.156, 635.8, -6.192, 633.033, -6.169, 634.364, -7.231, 385.342, -5.398, 355.832, -5.976, 354.349, -6.687, 355.538, -6.441, 354.603, -6.431, 355.53, -5.942, 355.111, -6.173, 355.058, -6.066, 353.264, -5.081, 354.555, -6.331]
#test_data_8 = [333.869, -7.241, 279.764, -6.157, 278.982, -5.137, 279.733, -5.795, 279.221, -5.95, 280.664, -7.194, 280.304, -6.392, 279.792, -6.159, 279.407, -6.708, 279.871, -6.074, 385.491, -6.271, 355.196, -5.838, 355.252, -5.464, 354.874, -6, 354.784, -5.887, 356.34, -7.222, 355.808, -6.089, 355.08, -5.56, 354.296, -5.947, 355.012, -5.965, 659.64, -6.035, 635.425, -5.589, 633.939, -6.761, 635.691, -6.302, 634.705, -6.692, 635.114, -5.898, 635.735, -5.809, 635.873, -6.226, 632.963, -5.889, 634.334, -7.099, 385.853, -5.435, 355.84, -6.127, 354.316, -6.76, 354.925, -6.601, 354.579, -6.489, 355.793, -6.01, 355.388, -6.372, 354.943, -6.145, 353.09, -5.234, 354.766, -6.405]
#test_data_7 = [333.826, -6.759, 279.564, -6.178, 279.047, -5.168, 279.915, -5.766, 279.624, -6.07, 280.879, -7.352, 280.573, -6.386, 280.177, -5.901, 279.635, -6.702, 280.007, -6.072, 386.075, -6.455, 355.52, -6.078, 354.92, -5.479, 354.855, -6.086, 354.608, -5.94, 356.272, -6.765, 355.624, -6.267, 355.154, -5.824, 354.449, -6.033, 355.233, -5.925, 659.473, -5.887, 635.591, -5.956, 633.956, -6.6, 635.87, -6.607, 634.423, -6.709, 635.301, -6.02, 635.442, -6.447, 635.94, -6.32, 632.869, -6.289, 634.648, -7.226, 385.653, -5.393, 355.722, -5.834, 354.53, -6.791, 355.033, -6.552, 354.68, -6.895, 355.257, -6.131, 355.276, -6.302, 354.831, -5.77, 352.877, -5.553, 354.684, -6.446]
#test_data_6 = [333.807, -6.856, 279.596, -6.158, 278.876, -5.292, 280.031, -5.722, 279.351, -6.199, 281.051, -7.385, 280.424, -6.575, 279.928, -5.997, 279.674, -6.79, 279.95, -6.346, 385.604, -6.407, 355.531, -5.954, 354.933, -5.511, 355.218, -6.11, 354.666, -5.775, 356.338, -6.887, 355.667, -5.971, 355.106, -5.995, 354.467, -6.015, 355.033, -6.017, 659.926, -5.777, 635.722, -5.534, 633.717, -6.726, 635.462, -6.512, 634.685, -6.348, 635.169, -5.861, 635.369, -6.078, 635.873, -6.218, 633.101, -6.032, 634.429, -6.898, 385.588, -5.682, 355.557, -5.983, 354.458, -6.399, 355.244, -6.535, 354.555, -6.5, 355.721, -5.784, 354.92, -6.153, 355.061, -5.763, 353.2, -5.355, 354.851, -6.675]
#test_data_5 = [333.75, -6.912, 279.725, -6.124, 279.2, -5.217, 279.824, -5.636, 279.258, -6.244, 280.849, -7.515, 280.257, -6.468, 279.817, -6.06, 279.571, -6.804, 279.694, -6.191, 385.793, -6.223, 355.435, -6.021, 355.361, -5.536, 354.788, -6.016, 354.716, -6.025, 356.151, -7.034, 355.794, -6.068, 355.047, -5.729, 354.366, -6.452, 355.173, -6.179, 659.793, -5.901, 635.702, -5.879, 634.012, -6.546, 635.244, -6.378, 634.591, -6.381, 635.223, -5.976, 635.262, -6.05, 635.937, -6.189, 633.036, -6.157, 634.51, -7.307, 385.336, -5.339, 355.447, -6.017, 354.492, -6.279, 355.21, -6.377, 354.421, -6.36, 355.844, -5.901, 354.971, -6.033, 355.085, -5.858, 353.398, -5.322, 354.686, -6.022]
#test_data_4 = [334.012, -6.819, 279.529, -5.896, 278.934, -5.068, 279.754, -5.678, 279.5, -6.041, 280.866, -7.491, 280.549, -6.321, 280.189, -6.044, 279.535, -6.628, 279.691, -6.399, 385.622, -6.502, 355.428, -6.227, 355.047, -5.381, 354.962, -6.11, 354.622, -6.07, 356.29, -7.073, 355.804, -5.933, 355.027, -5.69, 354.568, -6.132, 354.799, -6.199, 659.757, -6.033, 635.749, -5.744, 634.091, -6.461, 635.371, -6.579, 634.44, -6.787, 634.917, -5.841, 635.461, -6.157, 635.846, -6.26, 633.106, -6.206, 634.453, -7.6, 385.285, -5.485, 355.474, -5.889, 354.32, -6.712, 355.097, -6.523, 354.72, -6.521, 355.438, -6.113, 355.205, -6.122, 355.053, -6.227, 353.269, -5.11, 354.77, -6.284]
#test_data_3 = [333.699, -6.888, 279.574, -6.078, 278.753, -5.317, 279.717, -5.713, 279.303, -6.252, 280.899, -7.16, 280.627, -6.349, 279.92, -6.029, 279.294, -6.647, 279.569, -6.379, 385.537, -6.105, 355.397, -5.633, 354.855, -5.518, 355.126, -6.114, 354.575, -5.877, 356.365, -7.026, 355.667, -6.001, 354.847, -6.108, 354.296, -6.346, 355.082, -6.047, 659.728, -5.93, 636.002, -5.699, 633.866, -6.824, 635.468, -6.722, 634.506, -6.609, 635.039, -5.873, 635.514, -5.936, 635.754, -6.566, 632.805, -6.2, 634.422, -7.071, 385.52, -5.53, 355.526, -6.014, 354.373, -6.436, 355.191, -6.478, 354.458, -6.439, 355.515, -5.974, 355.386, -5.969, 355.039, -6.147, 353.086, -5.194, 354.791, -6.19]
#test_data_2 = [333.752, -7.17, 279.341, -6.319, 278.943, -5.277, 280.034, -5.847, 279.449, -6.267, 280.838, -7.396, 280.413, -6.291, 280.064, -5.875, 279.401, -6.676, 279.937, -5.928, 385.794, -6.407, 355.385, -6.302, 355.163, -5.602, 354.941, -6.308, 354.728, -5.849, 356.34, -6.785, 355.679, -6.121, 355.008, -5.607, 354.581, -6.158, 354.998, -6.251, 659.767, -5.783, 635.741, -5.761, 634.026, -6.344, 635.499, -6.376, 634.722, -6.671, 635.04, -6.004, 635.276, -6.172, 635.757, -6.082, 633.005, -5.898, 634.597, -7.086, 385.415, -5.178, 355.821, -5.973, 354.325, -6.686, 355.196, -6.76, 354.63, -6.463, 355.343, -6.132, 355.078, -6.029, 355.121, -5.671, 353.039, -5.213, 354.748, -6.222]
#test_data_1 = [333.907, -6.821, 279.772, -6.264, 278.963, -5.2, 279.911, -5.898, 279.325, -6.173, 280.895, -7.338, 280.676, -6.491, 280.392, -6.196, 279.703, -6.839, 279.665, -6.121, 385.561, -6.401, 355.334, -5.803, 355.297, -5.249, 355.072, -5.749, 354.503, -5.633, 356.275, -6.676, 356.107, -6.289, 355.146, -5.801, 354.434, -6.264, 355.191, -5.882, 659.993, -5.981, 635.795, -5.93 ,633.789, -6.924, 635.582, -6.539, 634.483, -6.393, 635.227, -6.112, 635.467, -6.03, 635.904, -6.039, 633.177, -6.514, 634.421, -7.201, 385.632, -5.734, 355.49, -6.044, 354.417, -6.759, 354.973, -6.644, 354.862, -6.526, 355.343, -6.054, 355.453, -6.243, 355.205, -5.841, 353.09, -5.298, 354.773, -6.234]
#test_data_28_UE2 = [333.853, -6.837, 279.537, -6.146, 278.753, -5.109, 279.854, -5.749, 279.267, -5.919, 280.874, -7.292, 280.35, -6.31, 280.356, -6.111, 279.108, -6.83, 279.745, -6.062, 385.746, -6.274, 355.424, -5.98, 354.853, -5.619, 355.018, -6.053, 354.384, -5.92, 356.193, -6.793, 355.744, -5.979, 354.885, -5.878, 354.624, -6.053, 355.076, -6.047, 659.66, -5.874, 635.876, -5.799, 634.183, -6.904, 635.692, -6.507, 634.941, -6.754, 635.128, -5.994, 635.409, -6.089, 635.894, -6.253, 632.913, -6.372, 634.384, -6.944, 385.578, -5.654, 355.602, -6.067, 354.362, -6.472, 355.145, -6.489, 354.66, -6.462, 355.503, -5.901, 355.393, -6.219, 354.926, -5.801, 353.401, -5.238, 354.436, -6.386]
#test_data_27_UE2 = [333.692, -6.892, 279.91, -6.1, 279.082, -5.231, 279.723, -5.622, 279.339, -6.127, 280.923, -7.366, 280.378, -6.361, 280.124, -6.039, 279.523, -6.636, 279.444, -6.26, 385.679, -6.445, 355.621, -6.115, 355.047, -5.525, 354.862, -6.133, 354.629, -5.62, 356.267, -6.751, 355.541, -6.252, 354.966, -6.003, 354.434, -6.197, 355.096, -6.188, 659.74, -5.852, 635.721, -5.857, 633.912, -6.898, 635.463, -6.603, 634.522, -6.864, 635.113, -5.917, 635.32, -6.032, 636.004, -6.35, 632.911, -6.278, 634.71, -7.11, 385.573, -5.399, 355.872, -5.977, 354.244, -6.499, 354.96, -6.649, 354.672, -6.554, 355.348, -5.987, 355.288, -6.22, 354.887, -5.685, 353.408, -5.268, 354.646, -6.345]
#test_data_26_UE2 = [333.904, -7.195, 279.531, -6.314, 279.068, -5.112, 279.77, -5.644, 279.503, -5.948, 280.886, -7.29, 280.455, -6.104, 280.194, -6.128, 279.581, -6.826, 279.792, -6.272, 385.251, -6.448, 355.457, -5.987, 354.873, -5.204, 355.115, -5.954, 354.543, -6.029, 356.451, -6.751, 355.947, -6.229, 354.873, -5.604, 354.315, -6.214, 355.056, -5.954, 659.906, -6.011, 635.808, -5.834, 634.239, -6.678, 635.753, -6.242, 634.661, -6.611, 635.216, -5.895, 635.307, -6.038, 635.745, -6.236, 632.982, -6.202, 634.336, -7.135, 385.518, -5.385, 355.67, -5.943, 354.261, -6.536, 355.011, -6.718, 354.688, -6.378, 355.415, -5.988, 355.233, -6.171, 355.017, -5.924, 353.45, -5.235, 354.294, -6.277]
#test_data_25_UE2 = [334.077, -6.814, 279.548, -6.134, 279.192, -5.065, 279.895, -5.52, 279.159, -5.856, 280.791, -7.462, 280.612, -6.376, 280.372, -5.961, 279.605, -6.737, 279.709, -6.139, 385.446, -6.399, 355.859, -5.88, 355.173, -5.522, 355.151, -5.996, 354.673, -6.012, 356.182, -6.937, 355.6, -6.117, 354.875, -5.763, 354.324, -6.125, 355.041, -6.09, 659.958, -5.743, 635.811, -6.029, 634.124, -6.957, 635.523, -6.613, 634.48, -6.662, 635.056, -5.823, 635.382, -6.03, 635.868, -6.056, 632.914, -5.98, 634.521, -7.271, 385.624, -5.488, 355.745, -5.984, 354.275, -6.686, 355.291, -6.674, 354.68, -6.471, 355.521, -6.062, 355.477, -6.074, 355.04, -5.933, 353.171, -5.408, 354.707, -6.348]
#test_data_24_UE2 = [333.643, -7.073, 279.567, -6.14, 278.881, -5.202, 279.763, -5.623, 279.386, -6.082, 280.859, -7.287, 280.487, -6.246, 280.305, -6.161, 279.538, -6.826, 280.025, -6.103, 385.587, -6.357, 355.331, -5.897, 355.323, -5.529, 355.082, -5.887, 354.679, -5.892, 356.221, -7.074, 355.776, -6.184, 354.78, -5.666, 354.878, -6.235, 355.267, -5.891, 659.83, -6.129, 635.637, -5.831, 634.204, -6.733, 635.457, -6.392, 634.701, -6.558, 635.019, -6.263, 635.486, -5.888, 635.868, -6.281, 632.769, -6.249, 634.373, -7.208, 385.381, -5.619, 355.477, -6.044, 354.286, -6.552, 354.962, -6.556, 354.627, -6.611, 355.496, -5.743, 355.057, -6.018, 355.07, -5.851, 353.277, -5.385, 354.6, -6.331]
#test_data_23_UE2 = [333.997, -7.049, 279.636, -6.154, 278.808, -5.068, 279.808, -5.458, 279.086, -6.131, 280.92, -7.331, 280.645, -6.381, 280.033, -6.061, 279.511, -6.949, 279.889, -6.243, 385.482, -6.284, 355.286, -5.984, 355.15, -5.316, 354.905, -5.905, 354.573, -6.038, 356.345, -7.125, 355.564, -6.281, 355.071, -5.922, 354.611, -6.255, 355.168, -6.033, 659.858, -5.955, 635.921, -5.872, 634.005, -6.825, 635.506, -6.561, 634.841, -6.589, 635.195, -6.154, 635.46, -5.91, 635.711, -6.343, 632.774, -6.058, 634.493, -6.89, 385.423, -5.499, 355.53, -6.005, 354.531, -6.632, 355.152, -6.72, 354.518, -6.481, 355.551, -6.219, 355.021, -6.377, 355.274, -5.84, 353.344, -5.155, 354.636, -6.242]
#test_data_22_UE2 = [333.952, -6.978, 279.59, -6.205, 279.052, -5.015, 279.496, -5.705, 279.389, -5.936, 280.957, -7.13, 280.358, -6.422, 279.927, -5.815, 279.497, -6.764, 279.885, -6.275, 385.785, -6.715, 355.553, -6.016, 355.228, -5.518, 355.005, -5.996, 354.69, -5.848, 356.166, -7.117, 355.953, -6.253, 354.863, -5.832, 354.361, -6.131, 355.063, -6.012, 659.996, -5.834, 635.766, -5.666, 634.006, -6.741, 635.301, -6.557, 634.804, -6.669, 635.156, -5.929, 635.27, -5.937, 636.215, -6.376, 632.885, -6.157, 634.537, -7.098, 385.77, -5.451, 355.649, -5.895, 354.549, -6.552, 355.348, -6.468, 354.569, -6.622, 355.293, -6.295, 354.965, -6.351, 355.064, -5.543, 353.244, -5.412, 354.641, -6.413]
#test_data_21_UE2 = [334.01, -6.932, 279.491, -6.213, 279.239, -5.213, 280.002, -5.629, 279.284, -5.921, 280.878, -7.055, 280.347, -6.261, 280.047, -5.89, 279.53, -6.782, 280.002, -6.023, 385.486, -6.393, 355.296, -6.114, 354.852, -5.334, 354.881, -6.26, 354.67, -5.52, 356.523, -6.994, 355.672, -6.126, 355.556, -5.779, 354.511, -6.185, 355.302, -5.988, 659.854, -5.836, 635.506, -5.738, 633.906, -6.737, 635.629, -6.514, 634.511, -6.593, 634.991, -5.81, 635.433, -6.222, 635.99, -6.313, 632.708, -6.279, 634.461, -7.136, 385.615, -5.469, 355.583, -5.857, 354.423, -6.516, 355.018, -6.595, 354.58, -6.219, 355.591, -5.944, 355.096, -6.226, 354.969, -5.894, 353.09, -5.649, 354.696, -6.114]
#test_data_20_UE2 = [334.032, -6.658, 279.452, -6.021, 279.032, -5.136, 280.233, -5.583, 279.448, -6.032, 281.25, -7.325, 280.714, -6.231, 280.035, -6.436, 279.509, -6.833, 279.605, -6.309, 385.812, -6.207, 355.564, -5.954, 354.994, -5.586, 354.941, -6.029, 354.626, -5.776, 356.242, -7.02, 355.697, -6.229, 354.928, -6.11, 354.502, -6.107, 355.156, -6.227, 659.984, -6.094, 635.959, -5.967, 633.745, -6.741, 635.264, -6.393, 634.321, -6.673, 635.012, -5.874, 635.332, -5.959, 635.644, -6.261, 632.782, -6.234, 634.265, -7.132, 385.507, -5.7, 355.411, -6.092, 354.275, -6.561, 355.285, -6.464, 354.645, -6.387, 355.645, -5.849, 355.154, -5.771, 354.844, -5.726, 353.105, -5.438, 354.845, -6.136]
#test_data_19_UE2 = [333.817, -6.891, 279.709, -6.189, 279.216, -5.356, 279.931, -5.817, 279.322, -5.869, 280.765, -7.407, 280.51, -6.352, 279.818, -5.897, 279.813, -6.516, 279.815, -6.215, 385.738, -6.253, 355.404, -5.775, 354.777, -5.816, 355.214, -5.941, 354.661, -5.877, 356.184, -6.735, 355.639, -6.158, 355.132, -5.884, 354.387, -6.254, 354.91, -5.99, 659.931, -5.817, 635.879, -6.011, 634.154, -6.762, 635.508, -6.439, 634.96, -6.602, 635.014, -6.093, 635.325, -6.136, 635.688, -6.28, 632.924, -6.035, 634.477, -7.383, 385.322, -5.755, 355.748, -5.872, 354.141, -6.51, 355.395, -6.542, 354.826, -6.422, 355.485, -6.117, 355.03, -5.843, 355.216, -5.602, 353.299, -5.181, 354.768, -6.525]
#test_data_18_UE2 = [333.759, -6.997, 279.522, -6.107, 279.061, -4.979, 280.131, -5.537, 279.504, -6.383, 280.872, -7.427, 280.466, -6.313, 280.195, -5.984, 279.379, -6.842, 279.64, -6.248, 385.686, -6.342, 355.404, -5.887, 354.871, -5.35, 354.963, -5.998, 354.622, -6.171, 356.229, -7.181, 355.685, -5.984, 355.179, -5.994, 354.575, -5.937, 355.068, -6.016, 659.892, -6.09, 635.654, -5.597, 634.033, -6.652, 635.558, -6.483, 634.482, -6.619, 634.98, -5.917, 635.245, -6.222, 635.903, -6.118, 632.942, -6.293, 634.361, -7.334, 385.628, -5.518, 355.576, -5.859, 354.434, -6.5, 355.356, -6.653, 354.774, -6.565, 355.509, -6.203, 355.299, -6.058, 355.269, -6.039, 352.967, -5.193, 354.813, -6.454]
#test_data_17_UE2 = [334.083, -6.857, 279.731, -5.973, 278.903, -5.185, 279.94, -5.591, 279.478, -6.158, 281.134, -7.442, 280.815, -6.533, 280.358, -5.936, 279.429, -6.615, 279.91, -5.982, 385.489, -6.537, 355.346, -6.067, 355.214, -5.543, 355.003, -6.1, 354.685, -5.835, 356.419, -7.098, 355.7, -6.059, 355.162, -5.845, 354.668, -6.159, 355.218, -6.241, 659.847, -5.999, 635.977, -5.844, 633.856, -6.682, 635.439, -6.442, 634.927, -6.405, 635.375, -5.796, 635.302, -5.928, 635.774, -6.273, 632.991, -6.003, 634.253, -7.502, 385.569, -5.613, 355.558, -5.903, 354.482, -6.418, 355.226, -6.398, 354.699, -6.252, 355.287, -6.212, 355.113, -6.205, 355.148, -5.971, 352.937, -5.4, 354.965, -6.396]
#test_data_16_UE2 = [333.97, -6.964, 279.754, -5.916, 279.027, -5.023, 280.044, -5.689, 279.591, -6.105, 280.954, -7.348, 280.297, -6.501, 280.055, -6.398, 279.577, -7.188, 279.68, -6.174, 385.572, -6.391, 355.313, -5.958, 354.931, -5.584, 355.122, -6.09, 354.622, -5.814, 356.354, -6.761, 355.923, -6.136, 355.099, -6.126, 354.43, -6.268, 355.236, -5.912, 659.886, -6.026, 635.689, -5.819, 633.904, -6.807, 635.244, -6.569, 634.582, -6.694, 634.959, -5.911, 635.343, -6.255, 635.914, -6.351, 632.72, -6.225, 634.618, -7.414, 385.59, -5.403, 355.486, -5.858, 354.202, -6.636, 355.163, -6.503, 354.63, -6.411, 355.48, -5.963, 355.056, -6.022, 355.161, -6.06, 353.135, -5.461, 354.841, -6.474]
#test_data_15_UE2 = [333.94, -6.966, 279.741, -6.137, 279.235, -4.849, 279.845, -5.523, 279.075, -6.109, 280.93, -7.22, 280.205, -6.437, 280.244, -6.144, 279.687, -6.652, 280.042, -6.122, 385.807, -6.316, 355.62, -5.864, 355.092, -5.603, 354.926, -5.96, 354.345, -5.873, 356.279, -6.819, 355.737, -5.942, 354.894, -5.563, 354.589, -6.017, 354.989, -6.057, 659.768, -5.648, 636.112, -5.451, 634.104, -6.593, 635.523, -6.449, 634.535, -6.59, 634.968, -5.908, 635.459, -6.297, 635.802, -6.404, 632.902, -5.897, 634.195, -7.177, 385.341, -5.575, 355.542, -5.976, 354.656, -6.451, 355.37, -6.544, 354.594, -6.512, 355.402, -5.83, 355.15, -5.889, 354.83, -5.787, 353.351, -5.22, 354.818, -6.361]
#test_data_14_UE2 = [333.84, -6.828, 279.51, -5.971, 278.998, -5.219, 279.772, -5.573, 279.319, -5.949, 280.824, -7.359, 280.645, -6.374, 280.189, -6.21, 279.404, -6.598, 280.029, -6.141, 385.798, -6.409, 355.45, -5.871, 355.098, -5.21, 355.276, -6.186, 354.839, -5.847, 356.524, -6.897, 355.703, -6.225, 354.985, -5.873, 354.328, -6.019, 354.971, -5.983, 659.697, -6.193, 635.5, -5.944, 633.982, -6.522, 635.306, -6.445, 634.645, -6.832, 634.838, -5.938, 635.388, -5.754, 635.799, -6.286, 633.337, -6.109, 634.301, -7.24, 385.819, -5.657, 355.661, -6.05, 354.279, -6.325, 355.218, -6.747, 354.83, -6.688, 355.436, -6.06, 355.106, -6.252, 355.358, -5.934, 353.416, -5.515, 354.817, -6.547]
#test_data_13_UE2 = [333.838, -6.837, 279.644, -5.943, 278.74, -4.885, 279.932, -6.019, 279.389, -5.977, 281.013, -7.187, 280.261, -6.437, 280.08, -5.963, 279.508, -6.406, 279.799, -6.181, 385.67, -6.295, 355.492, -5.819, 355.057, -5.623, 355.027, -5.909, 354.577, -5.688, 356.385, -6.707, 355.634, -5.973, 355.003, -5.779, 354.441, -6.191, 355.2, -5.994, 659.795, -6.097, 635.679, -5.963, 634.278, -6.773, 635.529, -6.249, 634.351, -6.708, 635.148, -5.961, 635.34, -6.001, 635.89, -6.273, 633.134, -6.099, 634.33, -7.132, 385.719, -5.388, 355.401, -6.025, 354.617, -6.434, 355.104, -6.394, 354.582, -6.533, 355.345, -6.032, 355.092, -6.039, 354.991, -6.178, 353.24, -5.357, 355.04, -6.381]
#test_data_12_UE2 = [334.063, -6.943, 279.286, -6.013, 278.951, -5.177, 279.688, -5.33, 278.888, -6.358, 280.606, -7.101, 280.393, -6.321, 280.087, -6.128, 279.54, -6.821, 279.817, -5.99, 385.489, -6.376, 355.23, -5.855, 355.041, -5.263, 355.231, -6.184, 354.716, -5.936, 356.194, -6.921, 355.839, -6.065, 355.09, -5.836, 354.408, -6.208, 355.27, -6.087, 659.614, -5.592, 635.703, -5.692, 633.916, -6.699, 635.583, -6.339, 634.507, -6.518, 634.973, -5.833, 635.353, -6.008, 635.851, -6.367, 633.055, -6.375, 634.675, -7.374, 385.472, -5.645, 355.613, -6.298, 354.222, -6.669, 355.034, -6.584, 354.579, -6.326, 355.535, -5.918, 355.462, -5.965, 355.104, -5.73, 353.448, -5.448, 354.871, -6.509]
#test_data_11_UE2 = [334.029, -7.08, 279.572, -6.097, 279.187, -5.048, 279.8, -5.695, 279.308, -6.026, 280.834, -7.465, 280.48, -6.109, 280.03, -6.001, 279.47, -6.801, 279.685, -6.187, 385.652, -6.63, 355.472, -6.158, 355.268, -5.451, 355.154, -6.186, 354.784, -6.096, 356.258, -7.063, 355.8, -6.132, 355.111, -5.635, 354.347, -6.466, 355.307, -5.883, 659.571, -6.21, 635.792, -5.748, 633.9, -6.705, 635.531, -6.762, 634.753, -6.626, 635.067, -5.822, 635.245, -5.895, 635.952, -6.532, 633.159, -6.111, 634.404, -7.077, 385.62, -5.533, 355.602, -6.063, 354.396, -6.475, 355.278, -6.414, 354.338, -6.41, 355.63, -5.834, 355.247, -6.221, 354.993, -5.897, 353.205, -5.381, 354.627, -6.493]
#test_data_10_UE2 = [333.832, -6.895, 279.738, -6.06, 279.035, -5.172, 279.654, -5.816, 279.527, -6.21, 280.734, -7.565, 280.591, -6.261, 280.231, -6.307, 279.487, -6.693, 279.536, -6.431, 385.549, -6.389, 355.528, -6.026, 354.874, -5.46, 355.035, -6.004, 354.464, -5.746, 356.39, -7.167, 355.71, -6.527, 354.894, -5.935, 354.261, -6.233, 354.918, -6.083, 659.772, -5.998, 635.683, -5.679, 634.197, -6.582, 635.763, -6.522, 634.615, -6.76, 635.328, -5.933, 635.679, -6.024, 635.859, -6.469, 632.904, -5.884, 634.451, -7.208, 385.355, -5.543, 355.27, -6.195, 354.254, -6.534, 355.158, -6.711, 354.768, -6.403, 355.525, -5.924, 355.319, -6.075, 355.018, -6.057, 353.131, -5.218, 354.671, -6.508]
#test_data_9_UE2 = [334.068, -6.901, 279.39, -6.223, 279.18, -5.065, 279.893, -5.708, 279.237, -6.008, 280.872, -7.306, 280.47, -6.411, 280.086, -6.118, 279.752, -6.675, 279.47, -6.112, 385.478, -6.42, 355.455, -5.976, 355.09, -5.5, 355.054, -6.123, 354.77, -5.884, 356.306, -6.922, 355.635, -5.92, 354.978, -5.657, 354.633, -6.337, 355.169, -5.997, 659.747, -6.067, 635.785, -5.915, 634.188, -6.601, 635.791, -6.721, 634.784, -6.602, 635.266, -5.901, 635.254, -6.141, 635.8, -6.287, 633.026, -6.337, 634.413, -7.275, 385.356, -5.603, 355.484, -6.089, 354.339, -6.569, 355.219, -6.594, 354.518, -6.384, 355.307, -5.996, 355.27, -6.131, 355.297, -5.857, 353.476, -5.24, 354.867, -6.103]
#test_data_8_UE2 =  [333.855, -7.066, 279.691, -6.043, 279.033, -5.384, 279.827, -5.917, 279.154, -6.207, 281.126, -7.185, 280.592, -6.289, 280.139, -5.998, 279.497, -6.447, 279.513, -6.207, 385.808, -6.489, 355.279, -6.057, 355.02, -5.546, 354.903, -6.04, 354.934, -5.691, 356.671, -6.926, 355.736, -6.195, 354.939, -5.818, 354.625, -6.347, 355.285, -6.195, 659.695, -5.929, 635.672, -5.732, 634.094, -6.583, 635.664, -6.624, 634.453, -6.513, 635.051, -6.241, 635.562, -6.064, 635.725, -6.123, 633.173, -6.286, 634.405, -7.359, 385.662, -5.491, 355.746, -5.777, 354.339, -6.504, 354.899, -6.469, 354.604, -6.347, 355.326, -5.827, 355.117, -5.86, 354.993, -5.924, 353.373, -5.19, 354.35, -6.295]
#test_data_7_UE2 = [333.66, -6.962, 279.688, -5.907, 279.064, -5.185, 279.888, -5.954, 279.229, -6.202, 280.929, -7.151, 280.472, -6.513, 280.022, -6.041, 279.56, -6.635, 279.708, -6.177, 385.285, -6.547, 355.538, -5.819, 354.962, -5.87, 354.882, -6.223, 354.979, -5.813, 356.291, -6.845, 355.736, -6.104, 354.846, -5.788, 354.353, -6.216, 354.89, -6.206, 659.744, -6.005, 635.835, -5.83, 634.274, -6.486, 635.47, -6.471, 634.449, -6.596, 635.149, -6.085, 635.257, -6.176, 636.012, -5.927, 632.806, -6.074, 634.575, -7.049, 385.418, -5.526, 355.643, -6.016, 354.238, -6.526, 355.009, -6.489, 354.647, -6.409, 355.493, -5.689, 355.245, -6.098, 355.336, -5.758, 353.138, -5.406, 354.789, -6.372]
#test_data_6_UE2 = [334.074, -6.947, 279.523, -6.187, 279.167, -5.267, 279.925, -5.811, 279.363, -6.015, 280.775, -6.998, 280.46, -6.341, 280.055, -6.037, 279.356, -6.622, 279.863, -6.223, 385.834, -6.468, 355.231, -5.867, 354.977, -5.464, 355.158, -5.847, 354.498, -6.075, 356.545, -6.897, 355.549, -6.302, 354.869, -6.082, 354.542, -6.59, 354.957, -6.177, 659.794, -5.953, 635.811, -5.575, 633.913, -6.789, 635.496, -6.634, 634.318, -6.534, 635.374, -5.878, 635.43, -5.913, 635.605, -6.301, 632.955, -6.391, 634.459, -6.971, 385.663, -5.505, 355.627, -6.042, 354.41, -6.715, 355.122, -6.701, 354.811, -6.585, 355.854, -5.955, 355.242, -6.038, 355.083, -5.852, 353.47, -5.404, 354.788, -6.586]
#test_data_5_UE2 = [333.901, -6.863, 279.486, -6.054, 278.961, -5.336, 279.62, -5.603, 279.232, -5.761, 280.633, -7.257, 280.343, -6.338, 280.258, -6.071, 279.309, -6.829, 279.882, -5.97, 385.717, -6.47, 355.428, -6.038, 355.022, -5.403, 355.136, -6.032, 354.602, -5.883, 356.423, -7.142, 355.975, -6.139, 354.825, -5.988, 354.471, -6.023, 355.124, -5.92, 659.977, -5.862, 635.834, -5.777, 633.889, -6.575, 635.49, -6.45, 634.733, -6.368, 635.135, -5.916, 634.961, -6.262, 635.899, -6.044, 633.005, -6.175, 634.56, -7.393, 385.751, -5.455, 355.605, -5.987, 354.515, -6.735, 355.118, -7.02, 354.31, -6.338, 355.303, -5.903, 355.266, -6.149, 355.144, -5.845, 353.021, -5.267, 354.779, -6.294]
#test_data_4_UE2 = [333.766, -6.819, 279.768, -6.095, 279.049, -5.273, 279.697, -5.567, 279.45, -6.395, 280.983, -7.297, 280.589, -6.23, 280.059, -5.855, 279.532, -6.676, 279.724, -6.269, 385.803, -6.372, 355.476, -6.04, 354.948, -5.616, 354.828, -6.076, 354.655, -6.208, 356.438, -6.97, 355.747, -6.145, 354.874, -5.707, 354.169, -6.3, 354.988, -5.861, 659.792, -5.783, 635.99, -5.943, 634.101, -6.659, 635.668, -6.407, 634.628, -6.749, 635.217, -6.05, 635.163, -5.941, 635.94, -6.307, 633.039, -6.204, 634.215, -7.269, 385.214, -5.576, 355.695, -6.116, 354.374, -6.284, 355.101, -6.908, 354.548, -6.609, 355.513, -6.054, 355.444, -6.074, 355.165, -5.719, 353.268, -5.557, 354.606, -6.051]

# Use the function to make predictions
                    predicted_output_28 = function_to_predict(test_data_28)
                    myvalue_28 = round(predicted_output_28)
#predicted_output = function_to_predict(test_data_26)
#predicted_output = function_to_predict(test_data_28)
#predicted_output = function_to_predict(test_data_25)
#predicted_output = function_to_predict(test_data_24)
#predicted_output = function_to_predict(test_data_23)
#predicted_output = function_to_predict(test_data_22)
#predicted_output = function_to_predict(test_data_21)
#predicted_output = function_to_predict(test_data_20)
#predicted_output = function_to_predict(test_data_19)
#predicted_output = function_to_predict(test_data_18)
#predicted_output = function_to_predict(test_data_17)
#predicted_output = function_to_predict(test_data_16)
#predicted_output = function_to_predict(test_data_15)
#predicted_output = function_to_predict(test_data_14)
#predicted_output = function_to_predict(test_data_13)
#predicted_output = function_to_predict(test_data_12)
#predicted_output = function_to_predict(test_data_11)
#predicted_output = function_to_predict(test_data_10)
#predicted_output = function_to_predict(test_data_9)
#predicted_output = function_to_predict(test_data_8)
#predicted_output = function_to_predict(test_data_7)
#predicted_output = function_to_predict(test_data_6)
#predicted_output = function_to_predict(test_data_5)
#predicted_output = function_to_predict(test_data_4)
#predicted_output = function_to_predict(test_data_3)
#predicted_output = function_to_predict(test_data_2)
#predicted_output = function_to_predict(test_data_1)
#predicted_output = function_to_predict(test_data_28_UE2)
#predicted_output = function_to_predict(test_data_27_UE2)
#predicted_output = function_to_predict(test_data_26_UE2)
#predicted_output = function_to_predict(test_data_25_UE2)
#predicted_output = function_to_predict(test_data_24_UE2)

# Print the predicted output
#print(f"Predicted Output: {predicted_output:.2f}")
                    print("Actual value MCS 28: 612.864")
#print("Actual value MCS 27: 5040.64")
                    #print("Actual value 26: 6512.64")
#print("Actual value MCS 25: 6272")
#print("Actual value MCS 24: 5888")
#print("Actual value MCS 23: 5504")
#print("Actual value MCS 22: 5120")
                    #print("Actual value MCS 21: 4736")
#print("Actual value MCS 20: 4352")
#print("Actual value MCS 19: 3968")
#print("Actual value MCS 18: 3624")
#print("Actual value MCS 17: 3368")
#print("Actual value MCS 16: 3496")
#print("Actual value MCS 15: 3240")
#print("Actual value MCS 14: 2856")
#print("Actual value MCS 13: 2536")
#print("Actual value MCS 12: 2216")
#print("Actual value MCS 11: 2024")
#print("Actual value MCS 10: 1800")
#print("Actual value MCS 9: 1800")
#print("Actual value MCS 8: 1608")
#print("Actual value MCS 7: 1352")
#print("Actual value MCS 6: 1160")
#print("Actual value MCS 5: 984")
#print("Actual value MCS 4: 808")
#print("Actual value MCS 3: 640")
#print("Actual value MCS 2: 504")
#print("Actual value MCS 1: 408")
#print("Actual value MCS 28 UE2: 4752")
#print("Actual value MCS 27 UE2: 4920")
#print("Actual value MCS 25 UE2: 5118")
#print("Actual value MCS 24 UE2: 4963")
#print("Actual value MCS 23 UE2: 4956")
#print("Actual value MCS 22 UE2: 4949")
#print("Actual value MCS 21 UE2: 4998")
#print("Actual value MCS 20 UE2: 5118")
#print("Actual value MCS 19 UE2: 5005")
#print("Actual value MCS 18 UE2: 4871")
#print("Actual value MCS 17 UE2: 5005")
#print("Actual value MCS 16 UE2: 5153")
#print("Actual value MCS 15 UE2: 5111")
#print("Actual value MCS 14 UE2: 4928")
#print("Actual value MCS 13 UE2: 5075")
#print("Actual value MCS 12 UE2: 5082")
#print("Actual value MCS 11 UE2: 5174")
#print("Actual value MCS 10 UE2: 5012")
#print("Actual value MCS 9 UE2: 5230")
#print("Actual value MCS 8 UE2: 5188")
#print("Actual value MCS 7 UE2: 5033")
#print("Actual value MCS 6 UE2: 5287")
#print("Actual value MCS 5 UE2: 5308")
#print("Actual value MCS 5 UE2: 5040")
#print("Actual value MCS 4 UE2: ")
#print("Actual value MCS 3 UE2: ")
#print("Actual value MCS 2 UE2: ")
#print("Actual value MCS 1 UE2; ")
                    
                    print ("Response 28 Send to xApp:", myvalue_28)  

# Load your dataset 'sample_data.csv'
                df = pd.read_csv("27_MCS_UE2.csv")
                df = df.dropna()          #removes any rows containing missing values
                X = df.drop('y', axis=1)  # We have 80 input columns, considering all except y column
                y = df['y']  # Here "y" is target variable

                print("Shape of X:", X.shape)  # This will print the rows and columns which has a shape of 610 rows and 80 columns.
                print("Shape of y:", y.shape)  # This will print the columns variable (target variable) which has a shape of 29 rows and 1 column

            # Split the dataset into training and testing sets
                X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

                to_train = False # don't re-train, use the saved model
            #to_train = True # train the model again
                if to_train:
            # Define the neural network model
                    model = Sequential()
                    model.add(Dense(units=64, activation='relu', input_dim=80))  # Adjust input_dim to match the number of input features (80)
                    model.add(Dense(units=128, activation='tanh'))
                    model.add(Dense(units=256, activation='tanh'))
                    model.add(Dense(units=512, activation='relu'))
                    model.add(Dense(units=256, activation='relu'))
                    model.add(Dense(units=64, activation='relu'))
                    model.add(Dense(units=8, activation='relu'))
                    model.add(Dense(units=1)) # Output layer for regression
                    model.compile(loss='mean_squared_error', optimizer='adam')           

            # Train the model (you can adjust batch size and epochs as needed)
                    model.fit(X_train, y_train, batch_size=2, epochs=100, verbose=1, validation_data=(X_test, y_test), shuffle=True)
                    model.save('27_model_UE2')
                else:
                    model = load_model('27_model_UE2') # load the model from the given folder
                
            # Function to predict 'y' based on input 'x' using the trained model
                def function_to_predict(x):
                # Reshape 'x' to match the input shape of the model (80 input features)
                    x = np.array(x).reshape(1, -1)
                    print(x)
                # Predict 'y' using the model

                    y_pred = model.predict(x)[0][0]            #used to extract a specific value from the prediction
                    print(f"Predicted value: {y_pred:.2f}")
                    return y_pred   

            # Generate random input data and make predictions 
                x_hat = []
                y_true = []

                for _ in range(1):
                    x = [random.uniform(-10.0, 700.0) for _ in range(80)]  # Generate random input within the specified range
                    x_hat.append(x)
                    y_true.append(function_to_predict(x))

            # Predict 'y' using the model
                y_hat = [function_to_predict(x) for x in x_hat]

            # Print the results in
                for i in range(len(y_true)):
                    print(f"Predicted 7 = {y_hat[i]:.2f}; Actual 7 = {y_true[i]:.2f}; Diff. 7 = {y_true[i] - y_hat[i]:.2f}")

                    test_data_27 = received_values_26
                    predicted_output_27 = function_to_predict(test_data_27)
                    myvalue_27 = round(predicted_output_27)

# Load your dataset 'sample_data.csv'
                df = pd.read_csv("26_MCS_UE2.csv")
                df = df.dropna()          #removes any rows containing missing values
                X = df.drop('y', axis=1)  # We have 80 input columns, considering all except y column
                y = df['y']  # Here "y" is target variable

                print("Shape of X:", X.shape)  # This will print the rows and columns which has a shape of 610 rows and 80 columns.
                print("Shape of y:", y.shape)  # This will print the columns variable (target variable) which has a shape of 29 rows and 1 column

            # Split the dataset into training and testing sets
                X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

                to_train = False # don't re-train, use the saved model
            #to_train = True # train the model again
                if to_train:
            # Define the neural network model
                    model = Sequential()
                    model.add(Dense(units=64, activation='relu', input_dim=80))  # Adjust input_dim to match the number of input features (80)
                    model.add(Dense(units=128, activation='tanh'))
                    model.add(Dense(units=256, activation='tanh'))
                    model.add(Dense(units=512, activation='relu'))
                    model.add(Dense(units=256, activation='relu'))
                    model.add(Dense(units=64, activation='relu'))
                    model.add(Dense(units=8, activation='relu'))
                    model.add(Dense(units=1)) # Output layer for regression
                    model.compile(loss='mean_squared_error', optimizer='adam')           

            # Train the model (you can adjust batch size and epochs as needed)
                    model.fit(X_train, y_train, batch_size=2, epochs=100, verbose=1, validation_data=(X_test, y_test), shuffle=True)
                    model.save('26_model_UE2')
                else:
                    model = load_model('26_model_UE2') # load the model from the given folder
                
            # Function to predict 'y' based on input 'x' using the trained model
                def function_to_predict(x):
                # Reshape 'x' to match the input shape of the model (80 input features)
                    x = np.array(x).reshape(1, -1)
                    print(x)
                # Predict 'y' using the model

                    y_pred = model.predict(x)[0][0]            #used to extract a specific value from the prediction
                    print(f"Predicted value: {y_pred:.2f}")
                    return y_pred   

            # Generate random input data and make predictions 
                x_hat = []
                y_true = []

                for _ in range(1):
                    x = [random.uniform(-10.0, 700.0) for _ in range(80)]  # Generate random input within the specified range
                    x_hat.append(x)
                    y_true.append(function_to_predict(x))

            # Predict 'y' using the model
                y_hat = [function_to_predict(x) for x in x_hat]

            # Print the results in
                for i in range(len(y_true)):
                    print(f"Predicted 26 = {y_hat[i]:.2f}; Actual 26 = {y_true[i]:.2f}; Diff. 26 = {y_true[i] - y_hat[i]:.2f}")

                    test_data_26 = received_values_26
                    predicted_output_26 = function_to_predict(test_data_26)
                    myvalue_26 = round(predicted_output_26)

# Load your dataset 'sample_data.csv'
                df = pd.read_csv("25_MCS_UE2.csv")
                df = df.dropna()          #removes any rows containing missing values
                X = df.drop('y', axis=1)  # We have 80 input columns, considering all except y column
                y = df['y']  # Here "y" is target variable

                print("Shape of X:", X.shape)  # This will print the rows and columns which has a shape of 610 rows and 80 columns.
                print("Shape of y:", y.shape)  # This will print the columns variable (target variable) which has a shape of 29 rows and 1 column

            # Split the dataset into training and testing sets
                X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

                to_train = False # don't re-train, use the saved model
            #to_train = True # train the model again
                if to_train:
            # Define the neural network model
                    model = Sequential()
                    model.add(Dense(units=64, activation='relu', input_dim=80))  # Adjust input_dim to match the number of input features (80)
                    model.add(Dense(units=128, activation='tanh'))
                    model.add(Dense(units=256, activation='tanh'))
                    model.add(Dense(units=512, activation='relu'))
                    model.add(Dense(units=256, activation='relu'))
                    model.add(Dense(units=64, activation='relu'))
                    model.add(Dense(units=8, activation='relu'))
                    model.add(Dense(units=1)) # Output layer for regression
                    model.compile(loss='mean_squared_error', optimizer='adam')           

            # Train the model (you can adjust batch size and epochs as needed)
                    model.fit(X_train, y_train, batch_size=2, epochs=100, verbose=1, validation_data=(X_test, y_test), shuffle=True)
                    model.save('25_model_UE2')
                else:
                    model = load_model('25_model_UE2') # load the model from the given folder
                
            # Function to predict 'y' based on input 'x' using the trained model
                def function_to_predict(x):
                # Reshape 'x' to match the input shape of the model (80 input features)
                    x = np.array(x).reshape(1, -1)
                    print(x)
                # Predict 'y' using the model

                    y_pred = model.predict(x)[0][0]            #used to extract a specific value from the prediction
                    print(f"Predicted value: {y_pred:.2f}")
                    return y_pred   

            # Generate random input data and make predictions 
                x_hat = []
                y_true = []

                for _ in range(1):
                    x = [random.uniform(-10.0, 700.0) for _ in range(80)]  # Generate random input within the specified range
                    x_hat.append(x)
                    y_true.append(function_to_predict(x))

            # Predict 'y' using the model
                y_hat = [function_to_predict(x) for x in x_hat]

            # Print the results in
                for i in range(len(y_true)):
                    print(f"Predicted 25 = {y_hat[i]:.2f}; Actual 7 = {y_true[i]:.2f}; Diff. 7 = {y_true[i] - y_hat[i]:.2f}")

                    test_data_25 = received_values_26
                    predicted_output_25 = function_to_predict(test_data_25)
                    myvalue_25 = round(predicted_output_25)

# Load your dataset 'sample_data.csv'
                df = pd.read_csv("24_MCS_UE2.csv")
                df = df.dropna()          #removes any rows containing missing values
                X = df.drop('y', axis=1)  # We have 80 input columns, considering all except y column
                y = df['y']  # Here "y" is target variable

                print("Shape of X:", X.shape)  # This will print the rows and columns which has a shape of 610 rows and 80 columns.
                print("Shape of y:", y.shape)  # This will print the columns variable (target variable) which has a shape of 29 rows and 1 column

            # Split the dataset into training and testing sets
                X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

                to_train = False # don't re-train, use the saved model
            #to_train = True # train the model again
                if to_train:
            # Define the neural network model
                    model = Sequential()
                    model.add(Dense(units=64, activation='relu', input_dim=80))  # Adjust input_dim to match the number of input features (80)
                    model.add(Dense(units=128, activation='tanh'))
                    model.add(Dense(units=256, activation='tanh'))
                    model.add(Dense(units=512, activation='relu'))
                    model.add(Dense(units=256, activation='relu'))
                    model.add(Dense(units=64, activation='relu'))
                    model.add(Dense(units=8, activation='relu'))
                    model.add(Dense(units=1)) # Output layer for regression
                    model.compile(loss='mean_squared_error', optimizer='adam')           

            # Train the model (you can adjust batch size and epochs as needed)
                    model.fit(X_train, y_train, batch_size=2, epochs=100, verbose=1, validation_data=(X_test, y_test), shuffle=True)
                    model.save('24_model_UE2')
                else:
                    model = load_model('24_model_UE2') # load the model from the given folder
                
            # Function to predict 'y' based on input 'x' using the trained model
                def function_to_predict(x):
                # Reshape 'x' to match the input shape of the model (80 input features)
                    x = np.array(x).reshape(1, -1)
                    print(x)
                # Predict 'y' using the model

                    y_pred = model.predict(x)[0][0]            #used to extract a specific value from the prediction
                    print(f"Predicted value: {y_pred:.2f}")
                    return y_pred   

            # Generate random input data and make predictions 
                x_hat = []
                y_true = []

                for _ in range(1):
                    x = [random.uniform(-10.0, 700.0) for _ in range(80)]  # Generate random input within the specified range
                    x_hat.append(x)
                    y_true.append(function_to_predict(x))

            # Predict 'y' using the model
                y_hat = [function_to_predict(x) for x in x_hat]

            # Print the results in
                for i in range(len(y_true)):
                    print(f"Predicted 24 = {y_hat[i]:.2f}; Actual 24 = {y_true[i]:.2f}; Diff. 24 = {y_true[i] - y_hat[i]:.2f}")

                    test_data_24 = received_values_26
                    predicted_output_24 = function_to_predict(test_data_24)
                    myvalue_24 = round(predicted_output_24)

# Load your dataset 'sample_data.csv'
                df = pd.read_csv("23_MCS_UE2.csv")
                df = df.dropna()          #removes any rows containing missing values
                X = df.drop('y', axis=1)  # We have 80 input columns, considering all except y column
                y = df['y']  # Here "y" is target variable

                print("Shape of X:", X.shape)  # This will print the rows and columns which has a shape of 610 rows and 80 columns.
                print("Shape of y:", y.shape)  # This will print the columns variable (target variable) which has a shape of 29 rows and 1 column

            # Split the dataset into training and testing sets
                X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

                to_train = False # don't re-train, use the saved model
            #to_train = True # train the model again
                if to_train:
            # Define the neural network model
                    model = Sequential()
                    model.add(Dense(units=64, activation='relu', input_dim=80))  # Adjust input_dim to match the number of input features (80)
                    model.add(Dense(units=128, activation='tanh'))
                    model.add(Dense(units=256, activation='tanh'))
                    model.add(Dense(units=512, activation='relu'))
                    model.add(Dense(units=256, activation='relu'))
                    model.add(Dense(units=64, activation='relu'))
                    model.add(Dense(units=8, activation='relu'))
                    model.add(Dense(units=1)) # Output layer for regression
                    model.compile(loss='mean_squared_error', optimizer='adam')           

            # Train the model (you can adjust batch size and epochs as needed)
                    model.fit(X_train, y_train, batch_size=2, epochs=100, verbose=1, validation_data=(X_test, y_test), shuffle=True)
                    model.save('23_model_UE2')
                else:
                    model = load_model('23_model_UE2') # load the model from the given folder
                
            # Function to predict 'y' based on input 'x' using the trained model
                def function_to_predict(x):
                # Reshape 'x' to match the input shape of the model (80 input features)
                    x = np.array(x).reshape(1, -1)
                    print(x)
                # Predict 'y' using the model

                    y_pred = model.predict(x)[0][0]            #used to extract a specific value from the prediction
                    print(f"Predicted value: {y_pred:.2f}")
                    return y_pred   

            # Generate random input data and make predictions 
                x_hat = []
                y_true = []

                for _ in range(1):
                    x = [random.uniform(-10.0, 700.0) for _ in range(80)]  # Generate random input within the specified range
                    x_hat.append(x)
                    y_true.append(function_to_predict(x))

            # Predict 'y' using the model
                y_hat = [function_to_predict(x) for x in x_hat]

            # Print the results in
                for i in range(len(y_true)):
                    
                    test_data_23 = received_values_26
                    predicted_output_23 = function_to_predict(test_data_23)
                    myvalue_23 = round(predicted_output_23)

# Load your dataset 'sample_data.csv'
                df = pd.read_csv("22_MCS_UE2.csv")
                df = df.dropna()          #removes any rows containing missing values
                X = df.drop('y', axis=1)  # We have 80 input columns, considering all except y column
                y = df['y']  # Here "y" is target variable

                print("Shape of X:", X.shape)  # This will print the rows and columns which has a shape of 610 rows and 80 columns.
                print("Shape of y:", y.shape)  # This will print the columns variable (target variable) which has a shape of 29 rows and 1 column

            # Split the dataset into training and testing sets
                X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

                to_train = False # don't re-train, use the saved model
            #to_train = True # train the model again
                if to_train:
            # Define the neural network model
                    model = Sequential()
                    model.add(Dense(units=64, activation='relu', input_dim=80))  # Adjust input_dim to match the number of input features (80)
                    model.add(Dense(units=128, activation='tanh'))
                    model.add(Dense(units=256, activation='tanh'))
                    model.add(Dense(units=512, activation='relu'))
                    model.add(Dense(units=256, activation='relu'))
                    model.add(Dense(units=64, activation='relu'))
                    model.add(Dense(units=8, activation='relu'))
                    model.add(Dense(units=1)) # Output layer for regression
                    model.compile(loss='mean_squared_error', optimizer='adam')           

            # Train the model (you can adjust batch size and epochs as needed)
                    model.fit(X_train, y_train, batch_size=2, epochs=100, verbose=1, validation_data=(X_test, y_test), shuffle=True)
                    model.save('22_model_UE2')
                else:
                    model = load_model('22_model_UE2') # load the model from the given folder
                
            # Function to predict 'y' based on input 'x' using the trained model
                def function_to_predict(x):
                # Reshape 'x' to match the input shape of the model (80 input features)
                    x = np.array(x).reshape(1, -1)
                    print(x)
                # Predict 'y' using the model

                    y_pred = model.predict(x)[0][0]            #used to extract a specific value from the prediction
                    print(f"Predicted value: {y_pred:.2f}")
                    return y_pred   

            # Generate random input data and make predictions 
                x_hat = []
                y_true = []

                for _ in range(1):
                    x = [random.uniform(-10.0, 700.0) for _ in range(80)]  # Generate random input within the specified range
                    x_hat.append(x)
                    y_true.append(function_to_predict(x))

            # Predict 'y' using the model
                y_hat = [function_to_predict(x) for x in x_hat]

            # Print the results in
                for i in range(len(y_true)):

                    test_data_22 = received_values_26
                    predicted_output_22 = function_to_predict(test_data_22)
                    myvalue_22 = round(predicted_output_22)

# Load your dataset 'sample_data.csv'
                df = pd.read_csv("21_MCS_UE2.csv")
                df = df.dropna()          #removes any rows containing missing values
                X = df.drop('y', axis=1)  # We have 80 input columns, considering all except y column
                y = df['y']  # Here "y" is target variable

                print("Shape of X:", X.shape)  # This will print the rows and columns which has a shape of 610 rows and 80 columns.
                print("Shape of y:", y.shape)  # This will print the columns variable (target variable) which has a shape of 29 rows and 1 column

            # Split the dataset into training and testing sets
                X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

                to_train = False # don't re-train, use the saved model
            #to_train = True # train the model again
                if to_train:
            # Define the neural network model
                    model = Sequential()
                    model.add(Dense(units=64, activation='relu', input_dim=80))  # Adjust input_dim to match the number of input features (80)
                    model.add(Dense(units=128, activation='tanh'))
                    model.add(Dense(units=256, activation='tanh'))
                    model.add(Dense(units=512, activation='relu'))
                    model.add(Dense(units=256, activation='relu'))
                    model.add(Dense(units=64, activation='relu'))
                    model.add(Dense(units=8, activation='relu'))
                    model.add(Dense(units=1)) # Output layer for regression
                    model.compile(loss='mean_squared_error', optimizer='adam')           

            # Train the model (you can adjust batch size and epochs as needed)
                    model.fit(X_train, y_train, batch_size=2, epochs=100, verbose=1, validation_data=(X_test, y_test), shuffle=True)
                    model.save('21_model_UE2')
                else:
                    model = load_model('21_model_UE2') # load the model from the given folder
                
            # Function to predict 'y' based on input 'x' using the trained model
                def function_to_predict(x):
                # Reshape 'x' to match the input shape of the model (80 input features)
                    x = np.array(x).reshape(1, -1)
                    print(x)
                # Predict 'y' using the model

                    y_pred = model.predict(x)[0][0]            #used to extract a specific value from the prediction
                    print(f"Predicted value: {y_pred:.2f}")
                    return y_pred   

            # Generate random input data and make predictions 
                x_hat = []
                y_true = []

                for _ in range(1):
                    x = [random.uniform(-10.0, 700.0) for _ in range(80)]  # Generate random input within the specified range
                    x_hat.append(x)
                    y_true.append(function_to_predict(x))

            # Predict 'y' using the model
                y_hat = [function_to_predict(x) for x in x_hat]

            # Print the results in
                for i in range(len(y_true)):

                    test_data_21 = received_values_26
                    predicted_output_21 = function_to_predict(test_data_21)
                    myvalue_21 = round(predicted_output_21)
                    myvalue_20 = 4956
                    myvalue_19 = 5040
                    myvalue_18 = 4913
                    myvalue_17 = 4970
                    myvalue_16 = 5019
                    myvalue_15 = 4998
                    myvalue_14 = 5026
                    myvalue_13 = 5216
                    myvalue_12 = 5005
                    myvalue_11 = 5108
                    myvalue_10 = 4998
                    myvalue_9 = 5270
                    myvalue_8 = 5185
                    myvalue_7 = 5140
                    myvalue_6 = 5050
                    myvalue_5 = 5167
                    myvalue_4 = 5198
                    myvalue_3 = 5270
                    myvalue_2 = 5101
                    myvalue_1 = 5217
                    myvalue_0 = 5104

                    values = [globals()[f"myvalue_{i}"] for i in range(0, 28)]
                    random.shuffle(values)
                    print("Predicted Effective Rates of UE2:", values)
                    max_value = max(values)
                    position = values.index(max_value)
                    response1 = position
                    print("Predicted and forwarded MCS to the xApp:", response1)
                    conn.sendall(struct.pack('!i', response1))   # Send integer as 4 bytes